//go:build go1.18
// +build go1.18

// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20231001preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BindingsClient contains the methods for the Bindings group.
// Don't use this type directly, use NewBindingsClient() instead.
type BindingsClient struct {
	internal *arm.Client
	rootScope string
}

// NewBindingsClient creates a new instance of BindingsClient with the specified values.
//   - rootScope - The scope in which the resource is present. UCP Scope is /planes/{planeType}/{planeName}/resourceGroup/{resourcegroupID}
//     and Azure resource scope is
//     /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewBindingsClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*BindingsClient, error) {
	cl, err := arm.NewClient(moduleName+".BindingsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &BindingsClient{
		rootScope: rootScope,
	internal: cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a DaprBindingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - bindingName - Binding name
//   - resource - Resource create parameters.
//   - options - BindingsClientBeginCreateOrUpdateOptions contains the optional parameters for the BindingsClient.BeginCreateOrUpdate
//     method.
func (client *BindingsClient) BeginCreateOrUpdate(ctx context.Context, bindingName string, resource DaprBindingResource, options *BindingsClientBeginCreateOrUpdateOptions) (*runtime.Poller[BindingsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, bindingName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[BindingsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[BindingsClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create a DaprBindingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *BindingsClient) createOrUpdate(ctx context.Context, bindingName string, resource DaprBindingResource, options *BindingsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, bindingName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *BindingsClient) createOrUpdateCreateRequest(ctx context.Context, bindingName string, resource DaprBindingResource, options *BindingsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/bindings/{bindingName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bindingName == "" {
		return nil, errors.New("parameter bindingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bindingName}", url.PathEscape(bindingName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
	return nil, err
}
	return req, nil
}

// BeginDelete - Delete a DaprBindingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - bindingName - Binding name
//   - options - BindingsClientBeginDeleteOptions contains the optional parameters for the BindingsClient.BeginDelete method.
func (client *BindingsClient) BeginDelete(ctx context.Context, bindingName string, options *BindingsClientBeginDeleteOptions) (*runtime.Poller[BindingsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, bindingName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[BindingsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[BindingsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a DaprBindingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *BindingsClient) deleteOperation(ctx context.Context, bindingName string, options *BindingsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, bindingName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *BindingsClient) deleteCreateRequest(ctx context.Context, bindingName string, options *BindingsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/bindings/{bindingName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bindingName == "" {
		return nil, errors.New("parameter bindingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bindingName}", url.PathEscape(bindingName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a DaprBindingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - bindingName - Binding name
//   - options - BindingsClientGetOptions contains the optional parameters for the BindingsClient.Get method.
func (client *BindingsClient) Get(ctx context.Context, bindingName string, options *BindingsClientGetOptions) (BindingsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, bindingName, options)
	if err != nil {
		return BindingsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BindingsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BindingsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *BindingsClient) getCreateRequest(ctx context.Context, bindingName string, options *BindingsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/bindings/{bindingName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bindingName == "" {
		return nil, errors.New("parameter bindingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bindingName}", url.PathEscape(bindingName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *BindingsClient) getHandleResponse(resp *http.Response) (BindingsClientGetResponse, error) {
	result := BindingsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprBindingResource); err != nil {
		return BindingsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByScopePager - List DaprBindingResource resources by Scope
//
// Generated from API version 2023-10-01-preview
//   - options - BindingsClientListByScopeOptions contains the optional parameters for the BindingsClient.NewListByScopePager
//     method.
func (client *BindingsClient) NewListByScopePager(options *BindingsClientListByScopeOptions) (*runtime.Pager[BindingsClientListByScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[BindingsClientListByScopeResponse]{
		More: func(page BindingsClientListByScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *BindingsClientListByScopeResponse) (BindingsClientListByScopeResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByScopeCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return BindingsClientListByScopeResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return BindingsClientListByScopeResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return BindingsClientListByScopeResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByScopeHandleResponse(resp)
		},
	})
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *BindingsClient) listByScopeCreateRequest(ctx context.Context, options *BindingsClientListByScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/bindings"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *BindingsClient) listByScopeHandleResponse(resp *http.Response) (BindingsClientListByScopeResponse, error) {
	result := BindingsClientListByScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprBindingResourceListResult); err != nil {
		return BindingsClientListByScopeResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a DaprBindingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - bindingName - Binding name
//   - properties - The resource properties to be updated.
//   - options - BindingsClientBeginUpdateOptions contains the optional parameters for the BindingsClient.BeginUpdate method.
func (client *BindingsClient) BeginUpdate(ctx context.Context, bindingName string, properties DaprBindingResourceUpdate, options *BindingsClientBeginUpdateOptions) (*runtime.Poller[BindingsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, bindingName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[BindingsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[BindingsClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update a DaprBindingResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *BindingsClient) update(ctx context.Context, bindingName string, properties DaprBindingResourceUpdate, options *BindingsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, bindingName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *BindingsClient) updateCreateRequest(ctx context.Context, bindingName string, properties DaprBindingResourceUpdate, options *BindingsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/bindings/{bindingName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bindingName == "" {
		return nil, errors.New("parameter bindingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bindingName}", url.PathEscape(bindingName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
	return nil, err
}
	return req, nil
}

